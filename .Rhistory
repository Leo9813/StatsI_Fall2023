Nile<-Nile
q()
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
IRkernel::installspec(user = FALSE)
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
IRkernel::installspec(user = FALSE)
IRkernel::installspec(user = FALSE)
q()
mean(v_na,mv.NA)
mean(v_na,NA.rm=TRUE)
mean(v_na,NA.rm=TRUE)
mean(v_na,na.rm=TRUE)
mean(v_na,na.rm = TRUE)
mean(v_na,na.rm = TRUE)
mean(v_na,na.rm=TRUE)
mean(v_na, na.rm = TRUE)
mean(v_na, na.rm = TRUE)
mean(v_na, na.rm = TRUE)
mean(v_na, na.rm = TRUE)
v_na <- c(1, 2, 3, NA, 5)
mean(v_na, na.rm = TRUE)
mean(v_na, na.rm = TRUE)
mean(v_na,na.rm=TRUE)
mean(v_na,na.rm = TRUE)
mean(v_na, na.rm=TRUE)
mean(df[df$cap==0, ]$income) # Calculate mean
# t-test
t.test(df$income ~ df$cap, alternative = "two.sided")
getwd()
# Load data
df <- read.csv("datasets/fictional_data.csv")
getwd()
# Get working directory
getwd()
# Set working directory
setwd("C:\Users\Leo\Documents\GitHub\StatsI_Fall2023")
# Set working directory
setwd("C:/Users/Leo/Documents/GitHub/StatsI_Fall2023")
getwd()
# Load data
df <- read.csv("datasets/fictional_data.csv")
?str
mean(df$income) # Central tendency, mean
sqrt(length(df$income)) # Take square root
sqrt(length(df$income)) # Take square root
# Step by step
df$income # Access variable
# Some quick visualizations, to look at distribution
hist(df$income,
#breaks = 20,
main="Monthly net income",
xlab="Euro")
plot(density(df$incom),
main="Monthly net income",
xlab="Euro")
# Some quick visualizations, to look at distribution
hist(df$income,
#breaks = 20,
main="Monthly net income",
xlab="Euro")
plot(density(df$incom),
main="Monthly net income",
xlab="Euro")
# The **approximate** solution
# Lower bound, 95 confidence level
upper_95 = mean(df$income)+(1.96*sd(df$income)/sqrt(length(df$income)))
# The **approximate** solution
# Lower bound, 95 confidence level
upper_95 = mean(df$income)+(1.96*sd(df$income)/sqrt(length(df$income)))
# The **approximate** solution
# Lower bound, 95 confidence level
upper_95 = mean(df$income)+(1.96*sd(df$income)/sqrt(length(df$income)))
plot(df$income,df$edu,
col=df$cap+1) # Color over third variable (+1, because first color in R is white)
# Add legend
legend(1000, 8, # x and y position of legend
legend=c("Non capital", "Capital"),
col=c("black","red"),
pch=1) # Marker type (1 is default)
t.test(df$income, mu = 3034, alternative = "less")
# We also found a much easier way to calculate the confidence intervals (!)
t.test(df$income, conf.level = 0.99, alternative = "two.sided")
mean(df[df$cap==0, ]$income) # Calculate mean
?t.test
print(a)
print(a)
a=1
print(a)
data("letters")
letters_length <- length(letters)
int_vector <- 1:letters_length
names(int_vector) <- letters
vowels <- int_vector[c("a", "e", "i", "o", "u")]
vowels_by_index <- int_vector[c(1, 5, 9, 15, 21)]
print(letters_length)
print(int_vector)
print(vowels)
print(vowels_by_index)
